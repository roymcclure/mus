El servidor (SrvMus.java) se queda escuchando y lanza un hilo por cada cliente que se conecta. Dichos hilos son de la clase
AtenderCliente y están almacenados en el array hilos[]. AtenderCliente guarda las colas de lectura y escritura para su cliente,
que son utilizadas por dos threads, uno de lectura
y otro de escritura. Ambas leen/escriben en el socket de manera simultánea aprovechando que son full duplex y reenvían los 
mensajes que llegan del cliente a la cola de trabajos para el controlador (ControllerJobs).

El Controlador del servidor (ServerController) analiza las peticiones de los clientes y modifica el estado de la partida
(o no) en función de su validez y valor. Si la petición es válida, se comprueba primero si debe ser reenviada al resto
de clientes porque también les atañe, y a continuación se actualiza el estado de la partida.

Todo esto sucede en:

private void processJob(Job job) {
		//System.out.println("Called processJob()");
		// game state is modified by clickReceived and message received
		if (job instanceof MessageJob) {
			//System.out.println("Controller: processing ServerMessageJob");
			MessageJob mj = (MessageJob) job;
			if (isValidRequest(mj.getClientMessage(),mj.getThreadId())) {
				if (shouldBeBroadcasted(mj.getClientMessage()))
					broadCastPlayerAction(mj.getClientMessage(), mj.getThreadId());
				updateGameStateWith(mj.getClientMessage(),mj.getThreadId());
				// include thread_id in should be broadcasted?
				// probably not the need for a broadcast is determined
				// by the nature of the message not so much by who sends it				
			}
		} 
	}
	
Por su parte los clientes son básicamente receptores de input que posiblemente será transformado en mensajes para el
servidor, y renderizadores del estado de la partida. Tienen colas de trabajo igualmente y dos hilos para leer/escribir 
el socket.

Los clientes después del envite a chica reciben un array diciendo qué jugadores tienen pares. Si los pares no son jugables,

Cuando no se juegan pares, después de mostrar a todos los jugadores hablando cada cliente envía un mensaje NO_SE_JUEGA_RONDA
al servidor. Cuando el servidor recibe tantos como el número máximo de clientes, pasa a la siguiente ronda.

En pares no se juega ronda si al menos uno de cada pareja no tiene pares.

En juego no se juega ronda en el mismo caso. Pero a diferencia de pares, si nadie tiene juego igualmente se juega, solo que
al punto.  